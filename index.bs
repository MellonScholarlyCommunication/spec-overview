<pre class='metadata'>
Title: Overview of the ResearcherPod specifications
Shortname: overview
Level: 1
Status: LD
URL: https://mellonscholarlycommunication.github.io/spec-overview
Editor: Miel Vander Sande, [meemoo - Flemish Institute for Archives](https://meemoo.be), miel.vandersande@meemoo.be
Editor: Patrick Hochstenbach, [IDLab - Ghent University](https://knows.idlab.ugent.be), patrick.hochstenbach@ugent.be
Editor: Ruben Dedecker, [IDLab - Ghent University](https://knows.idlab.ugent.be), ruben.dedecker@ugent.be
Editor: Jeroen Werbrouck, [IDLab - Ghent University](https://knows.idlab.ugent.be), Jeroen.Werbrouck@ugent.be
Abstract: This document introduces a set of technical reports that facilitate the implementation of a decentralized data exchange ecosystem using Solid.
Markup Shorthands: markdown yes
</pre>

<style>
table {
  margin: 25px auto;
  border-collapse: collapse;
  border: 1px solid #eee;
  border-bottom: 2px solid #005A9C;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th, table td {
  color: #999;
  border: 1px solid #eee;
  padding: 12px 12px;
  border-collapse: collapse;
}
table th {
  background: #005A9C;
  color: #fff;
}
table th.last {
  border-right: none;
}
</style>

Set of documents {#set}
=======================

This document is one of the specifications produced by the **ResearcherPod** and **ErfgoedPod** projects:

1. [Overview](/spec-overview/) (this document)
2. [Orchestrator](/spec-orchestrator/) 
3. [Data Pod](/spec-datapod/)
4. [Rule language](/spec-rulelanguage/)
5. [Artifact Lifecycle Event Log](/spec-eventlog/)
6. [Notifications](/spec-notifications/)
7. [Collector](/spec-collector/)

Introduction {#intro}
=====================

This document introduces a set of technical reports that facilitate the implementation of a decentralized data exchange ecosystem using [[solid-protocol]].
Essentially,
these reports focus on two generic problems common to decentralized Web networks:

- executing and automating business processes involving a distributed set of actors.
- discovering and collecting information that is distributed over the network.

This discovery of information that is stored on a decentralized Web can be quite generic. In this project
there is a particular focus on the discovery of lifecycle events to which the artifacts are subject.
Examples of such a lifecycle events in the realm of scholarly publication is information about when and where
articles have been cited, or peer-reviewed, or published in a journal, archived in a web archive.

This work aims to complement the [[solid-tr]] with a concrete framework for building a semi-automated decentralized network for a specific use case or domain.
It is joint output from two aligned projects:

- ResearcherPod: a [Ghent University - IDLab](http://idlab.ugent.be) project funded by the [Andrew W. Mellon foundation](https://mellon.org/) that explores an alternative scholarly communication system that is researcher-centric, institution-enabled, and aligned with Decentralized Web concepts and technologies.
- ErfgoedPod: a collaboration between [Netwerk Digitaal Erfgoed](https://netwerkdigitaalerfgoed.nl), [meemoo - Flemish Institute for Archiving](https://meemoo.be) and [Ghent University - IDLab](http://idlab.ugent.be) to investigate the feasability of applying [Solid](https://solidproject.org/) and Decentralized Web concepts to establish a sustainable exchange network for digital heritage data.

Work items {#work-items}
=====================

The following table provides an overview of all technical reports and subject matter that is being worked on.
The reports incorporated have been discussed among the project members and are constructed as project deliverables.
During the course of these projects, the information in these documents may be subject to change, therefore please see each documentâ€™s publication status and versions for further details.
Of course, you are invited to [contribute](https://github.com/MellonScholarlyCommunication/spec-overview/issues) any feedback, comments, or questions you might have.

<table>
    <caption>Technical Reports</caption>
    <thead>
        <tr>
            <th>Work Item</th>
            <th>Repository</th>
            <th>Current Stage</th>
            <th>Next Stage</th>
            <th>Target</th>
            <th>Expected Completion</th>
        </tr>
    </thead>
    <tbody>
        <tr>
          <td><a href="/spec-overview/" rel="cito:citesForInformation">This document.</a></td>
          <td><a href="https://github.com/mellonscholarlycommunication/spec-overview">spec-overview</a></td>
          <td>Draft Technical Report</td>
          <td>Technical Report</td>
          <td>Technical Report</td>
          <td>Q1 2022</td>
        </tr>
        <tr>
            <td><a href="/spec-orchestrator/" rel="cito:citesForInformation">Specification of the Orchestrator component.</a></td>
            <td><a href="https://github.com/mellonscholarlycommunication/spec-orchestrator">spec-orchestrator</a></td>
            <td>Working Draft</td>
            <td>Draft Technical Report</td>
            <td>Technical Report</td>
            <td>Q4 2022</td>
        </tr>
        <tr>
            <td><a href="/spec-datapod/" rel="cito:citesForInformation">Implementation guidelines and additional requirements for Solid data pods.</a></td>
            <td><a href="https://github.com/mellonscholarlycommunication/spec-datapod">spec-datapod</a></td>
            <td>Working Draft</td>
            <td>Draft Technical Report</td>
            <td>Technical Report</td>
            <td>Q4 2022</td>
        </tr>
        <tr>
            <td><a href="/spec-rulelanguage/" rel="cito:citesForInformation">Specification of the rule language to create executable business processes.</a></td>
            <td><a href="https://github.com/mellonscholarlycommunication/spec-rulelanguage">spec-rulelanguage</a></td>
            <td>Working Draft</td>
            <td>Draft Technical Report</td>
            <td>Technical Report</td>
            <td>Q4 2022</td>
        </tr>
        <tr>
            <td><a href="/spec-eventlog/" rel="cito:citesForInformation">Implementation requirements for the Artifact Lifecycle Event Log.</a></td>
            <td><a href="https://github.com/mellonscholarlycommunication/spec-datapod">spec-datapod</a></td>
            <td>Working Draft</td>
            <td>Draft Technical Report</td>
            <td>Technical Report</td>
            <td>Q2 2022</td>
        </tr>
        <tr>
            <td><a href="/spec-notifications/" rel="cito:citesForInformation">Specification of the possible notifications that can be used in the network.</a></td>
            <td><a href="https://github.com/mellonscholarlycommunication/spec-notifications">spec-notifications</a></td>
            <td>Draft Technical Report</td>
            <td>Technical Report</td>
            <td>Technical Report</td>
            <td>Q1 2022</td>
        </tr>
        <tr>
            <td><a href="/spec-collector/" rel="cito:citesForInformation">Specification of the Collector component.</a></td>
            <td><a href="https://github.com/mellonscholarlycommunication/spec-collector">spec-collector</a></td>
            <td>Working Draft</td>
            <td>Draft Technical Report</td>
            <td>Technical Report</td>
            <td>Q4 2022</td>
        </tr>
    </tbody>

    <tfoot>
        <tr>
        <td colspan="6"></td>
        </tr>
    </tfoot>

</table>

Terminology {#definitions}
===========

<figure>
<img src="./images/terminology.svg" />
<caption>
</caption>
</figure>

The following terms are used across all specifications:

: <dfn export>Agent</dfn>
:: From [[solid-protocol]]: <i>an agent is a person, social entity, or software identified by a [[solid-protocol#uniform-resource-identifier|URI]]; e.g., a WebID denotes an agent [[webid]].</i> 
:: Agents actively participate in the network: they perform actions, are identified by a [[webid]], and addressed through [=notification=].

: <dfn export>Artifact</dfn>
:: An artifact is a [[solid-protocol#resource|resource]] identified by an [[solid-protocol#uniform-resource-identifier|URI]] that serves as the main focus of interaction between [=agents=]. Examples are a digitized image in an archive, the webpage of a scientific publication, a digital representation of a cultural heritage object, or a data set in a repository. 
:: Artifacts can be atomic or arbitrarily complex. How they are organized is outside the scope of this document and is dependent on the implementing community.

: <dfn export>Notification</dfn>
:: A notification is a message delivered from one [=agent=] to another using the [[ldn|Linked Data Notifications (LDN)]] protocol.
:: Notifications are expressed in [[activitystreams-vocabulary|Activity Streams 2.0 (AS2.0)]] and their payload describes an [=activity=].

: <dfn export>Activity</dfn>
:: An activity describes some form of action directly or indirectly related to an [=artifact=] that is currently happening, or has already happened.
:: Activities are conform with the [[activitystreams-vocabulary#activities|AS2.0 Activities]].

: <dfn export>Node</dfn>
:: A node is the main component in the network. It provides artifacts or artifact-related services to the network, and is able to communicate with other nodes. 
:: A node is a [[solid-protocol#http-server|HTTP Server]] that hosts three types of resources: [=artifact=], [=inbox=], and [=Lifecycle Event Log=]. It is also an Linked Data Notifications [[ldn#receiver|Sender]], [[ldn#receiver|Receiver]] and [[ldn#receiver|Consumer]]. 

: <dfn export>Inbox</dfn>
:: An inbox is a [[solid-protocol#resource|resource]] conform with the [[!ldn|Linked Data Notifications specification]]. In case the [=node=] that hosts the inbox is a [=data pod=], this is usually implemented as an [[ldp#ldpc-container|LDP Container]].
:: [=Agents=] can POST an [=activity=] in order to send information pertaining to an [=artifact=] to another [=agent=], in order to inform the other party or request a service. 

: <dfn export>Lifecycle Event</dfn>
:: A life cycle event is an [=activity=] pertaining to an [=artifact=] that somehow impacts the artifact's public lifecycle. It is communicated via a [=notification=] and that the [=node=] sending or receiving the notification deemed relevant to disclose. 

: <dfn export>Lifecycle Event Log</dfn>
:: A lifecycle event log is an append-only public [[solid-protocol#resource|resource]] that exposes a series of [=lifecycle events=] related to artifacts stored and services provided by [=nodes=].
:: It constructs a view over an [=inbox=]'s contents that is determined by a [=selector=], allowing a selected subset of [=activities=] (eg. grouped per artifact) to be consumed.
:: A lifecycle event log is discoverable via the [=artifact=] that the log pertains to.

: <dfn export>Selector</dfn>
:: A selector is a boolean function that decides whether or not a [=activity=] belongs to the [=lifecycle event log=] or not. 

: <dfn export>Collector</dfn>
:: An automated Web application that collects information from [=lifecycle event logs=] hosted by any [=node=].

The following additional terms are specific to [=nodes=] that, in addition to meeting the minimal requirements, also implement the [[solid-protocol]]:

<figure>
<img src="./images/terminology-pod.svg" />
<caption>
</caption>
</figure>

: <dfn export>Data Pod</dfn>
:: From the [[solid-protocol]]: <i>a data pod is a place for storing documents, with mechanisms for controlling who can access what.</i>
:: A data pod can be used to construct a [=node=] that is conform to the [[solid-protocol]]. It stores [=artifacts=] that are made available to the network and is a Linked Data Notifications [[ldn#receiver|Receiver]].

: <dfn export>Data Pod owner</dfn>
:: From the [[solid-protocol]]: <i>an owner is a person or a social entity that is considered to have the rights and responsibilities of a data storage. An owner is identified by a URI, and implicitly has control over all data in a storage. An owner is first set at storage provisioning time and can be changed.</i>
:: A data pod owner is an [=agent=] that is responsible for maintaining the data pod and its artifacts. The owner can be identified by its [[webid]] and reached via an [=inbox=]. 
:: For example: in case the data pod stores scholarly artifacts, the owner is typically an author or contributor to these artifacts. In case the data pod stores digital heritage objects, the owner is typically the institution or the institutional employee that curates and maintains these collections. 

: <dfn export>Service Hub</dfn>
:: A service hub is a [=node=] that provides value-added services for [=artifacts=] that are made available in the network.
:: It minimally meets the [=node=] requirements but can also be a (partial) implementation of the [[solid-protocol]].

: <dfn export>Service Hub owner</dfn>
:: A service hub owner is the [=agent=] responsible for maintaining the service hub and the service it provides. 
:: The owner can be identified by its [[webid]] and reached via an [=inbox=]. 

: <dfn export>Dashboard</dfn>
:: The dashboard is a user-facing Web application that enables an [=agent=] to manually interact with other [=agents=] or [=nodes=] in the network. 
:: The dashboard is a Linked Data Notifications [[ldn#receiver|Sender]] and [[ldn#receiver|Consumer]]. In case it is used to manage a [=data pod=], it will also be a compliant [[solid-protocol#solid-app|Solid App]] implementation.

: <dfn export>Orchestrator</dfn>
:: The orchestrator is an autonomous Web application dedicated to a single [=node=]. It interprets and executes business rules described in a [=rulebook=].
:: The orchestrator is also a Linked Data Notifications [[ldn#receiver|Sender]] and [[ldn#receiver|Consumer]].

: <dfn export>Rulebook</dfn>
:: A set of machine-readable business rules that instruct the [=orchestrator=] on what actions to take in response to incoming [=notifications=].


Dashboard and Orchestrator {#differences}
=======================================================

In our specifications two agents interact directly with the [=Data Pod=] with different privileges: the [=Orchestrator=],
and the [=Dashboard=]. While in real applications these agents could overlap or might not be required at all (in
some use cases), in our specifications they are treated as separate entities to help the discussion. Some reasons why
these Actors could be treated as separate entities:

- privileges needed to access the [=data pod=]
- requirements needed to receive direct feedback from an [=agent=]
- requirements needed to permanently be **online**
- requirements needed to correctly implement [=notifications=] and [=rulebooks=]

With this regard:

<table>
  <tr>
    <th>Dashboard
    <td>
    The [=Dashboard=] responds to feedback from an [=agent=]. Typically, this [=Dashboard=] runs in a browser
    can be in an online or offline modus when a browser is running on the computer of the maintainer with one of the browser
    tabs opened with the dashboard application.
  <tr>
    <th>Orchestrator
    <td>
    The [=Orchestrator=] can read the (Scholarly) [=Inbox=] of the [=Data Pod=] and append to
    the [=Lifecycle Event Log=]. Guided by the [=Rulebook=], 
    the [=Orchestrator=] communicates with the network using
    the [=Notifications=].
</table>

The network below demonstrates the CRUD privileges imagined for the different actors in this document. The first
network demonstrates a typical Solid setup where the [=dashboard=] is a single page application that has direct access
to the [=data pod=]. The [=Orchestrator=] is a software component that could be part of the [=dashboard=] 
process, but in general is meant to be running as separate network service, always online
working on behalf of the [=data pod owner=]. There can be other applications in the 
network (indicated by Something) that can read data from the [=data pod=] or send [=notifications=] to
the [=data pod=], but without requiring direct privileges to change artifacts on the [=data pod=].

<figure>
  <img src="images/mellon-crud-app.svg" width="80%">
  <caption>
  CRUD operations in case the [=Dashboard=] is single-page application and [=Orchestrator=] a background task
  </caption>
</figure>


The second network demonstrates a more classic setup with a browser [=Dashboard=] controlled by a server App which uses a
[=data pod=] as backend storage.

<figure>
  <img src="images/mellon-crud.svg" width="80%"></div>
  <caption>
  CRUD operations in case the [=Dashboard=] and a [=Service Hub=] (which also runs to an 
  [=Orchestrator=] component) is a classic client/server application
  </caption>
</figure>

Communication between Data Pods and domain-specific networks {#domain-specific-networks}
============================================================

## Communication between Data Pod and Scholarly Community network ## {#scholarly-comm}

[=Notifications=] can be sent from the researcher environment to [=Service Hub=] environments.
For instance, in case of a request to review an artifact that resides in the [=Data Pod=], an
appropriate notification can be sent to a review [=Service Hub=]. The [=Service Hub=] can respond,
for example, accepting or rejecting the review request, and, in the latter case, to relay
the result of the review.

The [=Orchestrator=] sends notifications in response to triggers that result from the execution of
the rulebook is associated with the [=Data Pod=]. The [=Orchestrator=]
receives notifications in response to the ones it sent. The [=Orchestrator=] selectively records information
contained in both outgoing and incoming notifications in the [=Lifecycle Event Log=].

The [=notifications=] are regarded as a high-level approach to automatically coordinate the distributed
execution of the crucial functions of scholarly communication. The notifications merely ensure that the
respective functions are in effect executed as prescribed by the rulebook, but do not attempt to
automate the actual fulfillment of the function itself. For instance, when an `Offer` is sent to a Review Service
we don't envision that message contains all the steps to fully automate the submission process.
It could contain enough metadata to enable simple workflows. In general out of band communication
could be needed to perform all required steps.

## Communication between Data Pod and Cultural Heritage network ## {#cultural-heritage}

In the cultural heritage domain, 
institutions that manage collections, such as museums or libraries, and
service providers, such as object registrars, user-facing portals or digital archives,
participate in a joint network with the goal of sharing digital metadata and objects effectively.
Institutions maintain a [=Data Pod=] as primary exchange hub for metadata about their collections.
End-user portals aims to collect thematic subsets from this selection of pods.
In between, there is a layer of facilitating services that 

- make data findable for portals and other applications, such as indexing metadata for search or disseminating collection information to other network members;
- provide value-added services to institutions like enriching metadata by adding links to other collections, or doing digital preservation.

Institutions use notifications to request services from the designated [=Service Hub=], eg. they can `Offer` a dataset to a enrichment service. 
In addition, notifications are used by all parties to inform each other about relevant changes.
A [=Service Hub=] can respond with, for example, an accept or reject of the request for digital preservation, or simply take note.
The result of a service, ie. the object is preserved digitally for the long term, is a new piece of metadata that augments the object's lifecycle.
This event can be communicated with a new notification to the institution that made the requested or other interested [=agents=] in the network. 

Driven by a mix of policy derived from institutional and cooperation requirements,
institutions follow processes that dictate when to request certain services, contact other [=agents=] and in what order.
These processes can be declared in a [=rulebook=] and executed in an automated manner by an [=Orchestrator=].

Services that help the chasm between the [=Data Pod=] and data consuming portals, can maintain a [=Data Pod=] of their own, 
for storing and exposing derivatives to upper layers in the network. 
For instance, 
a [=Service Hub=] that collects datasets from institution's [=Data Pods=] to generate dataset summaries and enrichments can store these results.
In turn, an end-user portal can use the data of this [=Service Hub=] to find [=Data Pods=] with relevant data. 


<pre class=biblio>
{
	"solid-protocol": {
		"authors": [
			"Sarven Capadisli",
			"Tim Berners-Lee",
			"Ruben Verborgh",
			"Kjetil Kjernsmo",
			"Justin Bingham",
			"Dmitri Zagidulin"
		],
		"href": "https://solidproject.org/TR/protocol/",
		"title": "The Solid Protocol",
		"status": "Editorâ€™s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
  "webid": {
		"authors": [
			"Andrei Sambra",
			"Henry Story",
			"Tim Berners-Lee"
		],
		"href": "https://dvcs.w3.org/hg/WebID/raw-file/tip/spec/identity-respec.html",
		"title": "WebID 1.0",
		"status": "Editorâ€™s Draft",
		"publisher": "WebID Community Group",
		"deliveredBy": [
			"https://www.w3.org/community/webid/"
		]
	},
  "solid-oidc": {
		"authors": [
			"Aaron Coburn (Inrupt)",
			"elf Pavlik",
			"Dmitri Zagidulin"
		],
		"href": "https://solid.github.io/authentication-panel/solid-oidc/",
		"title": "SOLID-OIDC",
		"status": "Editorâ€™s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
  "solid-tr": {
		"href": "https://solidproject.org/TR/",
		"title": "Solid Technical Reports",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	}
}
</pre>

# Acknowledgement {#acknowledgement}

We thank Herbert Van de Sompel, [DANS + Ghent University](https://dans.knaw.nl/nl/), hvdsomp@gmail.com
for the valuable input during this project.
